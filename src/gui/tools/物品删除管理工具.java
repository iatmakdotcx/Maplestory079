/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.tools;

import database.DBConPool;
import scripting.NPCConversationManager;
import server.MapleItemInformationProvider;
import server.Start;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Administrator
 */
public class 物品删除管理工具 extends javax.swing.JFrame {

    /**
     * Creates new form 锻造控制台
     */
    public 物品删除管理工具() {
        ImageIcon icon = new ImageIcon(Objects.requireNonNull(getClass().getClassLoader().getResource("image2/logo.png")));
        setIconImage(icon.getImage());
        setTitle("批量删除物品管理工具");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanel jPanel37 = new JPanel();
        JScrollPane jScrollPane27 = new JScrollPane();
        游戏道具 = new javax.swing.JTable();
        游戏道具代码 = new javax.swing.JTextField();
        JLabel jLabel338 = new JLabel();
        JPanel jPanel38 = new JPanel();
        JButton 查找道具 = new JButton();
        JButton 删除道具 = new JButton();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        JLabel jLabel337 = new JLabel();
        JPanel jPanel49 = new JPanel();
        JButton 查找道具1 = new JButton();
        JButton 删除道具1 = new JButton();
        JLabel jLabel339 = new JLabel();
        JPanel jPanel62 = new JPanel();
        JButton 查找道具2 = new JButton();
        JButton 删除道具2 = new JButton();
        JLabel jLabel340 = new JLabel();
        JPanel jPanel63 = new JPanel();
        JButton 查找道具3 = new JButton();
        JButton 删除道具3 = new JButton();
        JLabel jLabel341 = new JLabel();
        JPanel jPanel64 = new JPanel();
        JButton 查找道具4 = new JButton();
        JButton 删除道具4 = new JButton();
        JLabel jLabel342 = new JLabel();
        JLabel jLabel343 = new JLabel();
        JLabel jLabel344 = new JLabel();
        JLabel jLabel345 = new JLabel();

        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel37.setBackground(new java.awt.Color(255, 255, 255));
        jPanel37.setBorder(javax.swing.BorderFactory.createTitledBorder("批量删除游戏物品"));

        游戏道具.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        游戏道具.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "角色ID", "角色名字", "道具ID", "道具名字"
                }
        ) {
            final boolean[] canEdit = new boolean[]{
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        游戏道具.setColumnSelectionAllowed(true);
        jScrollPane27.setViewportView(游戏道具);

        jLabel338.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel338.setForeground(new java.awt.Color(255, 51, 51));
        jLabel338.setText("需离线操作。");

        jPanel38.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel38.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        查找道具.setText("查找道具");
        查找道具.addActionListener(this::查找道具ActionPerformed);
        jPanel38.add(查找道具, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        删除道具.setText("删除道具");
        删除道具.addActionListener(this::删除道具ActionPerformed);
        jPanel38.add(删除道具, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 30));

        jLabel337.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel337.setText("角色背包，角色穿戴");
        jPanel38.add(jLabel337, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jPanel49.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel49.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        查找道具1.setText("查找道具");
        查找道具1.addActionListener(this::查找道具1ActionPerformed);
        jPanel49.add(查找道具1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        删除道具1.setText("删除道具");
        删除道具1.addActionListener(this::删除道具1ActionPerformed);
        jPanel49.add(删除道具1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 30));

        jLabel339.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel339.setText("点券拍卖行");
        jPanel49.add(jLabel339, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jPanel62.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel62.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        查找道具2.setText("查找道具");
        查找道具2.addActionListener(this::查找道具2ActionPerformed);
        jPanel62.add(查找道具2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        删除道具2.setText("删除道具");
        删除道具2.addActionListener(this::删除道具2ActionPerformed);
        jPanel62.add(删除道具2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 30));

        jLabel340.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel340.setText("金币拍卖行");
        jPanel62.add(jLabel340, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jPanel63.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel63.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        查找道具3.setText("查找道具");
        查找道具3.addActionListener(this::查找道具3ActionPerformed);
        jPanel63.add(查找道具3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        删除道具3.setText("删除道具");
        删除道具3.addActionListener(this::删除道具3ActionPerformed);
        jPanel63.add(删除道具3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 30));

        jLabel341.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel341.setText("家族游戏仓库");
        jPanel63.add(jLabel341, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jPanel64.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel64.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        查找道具4.setText("查找道具");
        查找道具4.addActionListener(this::查找道具4ActionPerformed);
        jPanel64.add(查找道具4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 140, 30));

        删除道具4.setText("删除道具");
        删除道具4.addActionListener(this::删除道具4ActionPerformed);
        jPanel64.add(删除道具4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 140, 30));

        jLabel342.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel342.setText("个人游戏仓库");
        jPanel64.add(jLabel342, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 20));

        jLabel343.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel343.setText("游戏道具代码；");

        jLabel344.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel344.setText("该功能可查询游戏内指定区域的游戏道具，可以查看");

        jLabel345.setFont(new java.awt.Font("幼圆", Font.PLAIN, 15)); // NOI18N
        jLabel345.setText("该道具有多少玩家拥有。可以一键删除所有该道具。");

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
                jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel37Layout.createSequentialGroup()
                                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel37Layout.createSequentialGroup()
                                                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane27)
                                                        .addGroup(jPanel37Layout.createSequentialGroup()
                                                                .addGap(160, 160, 160)
                                                                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel345, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel344, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(0, 0, Short.MAX_VALUE)))
                                                .addGap(18, 18, 18))
                                        .addGroup(jPanel37Layout.createSequentialGroup()
                                                .addGap(276, 276, 276)
                                                .addComponent(jLabel338)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel343)
                                        .addComponent(游戏道具代码, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel62, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel49, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel64, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jPanel63, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24))
        );
        jPanel37Layout.setVerticalGroup(
                jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel37Layout.createSequentialGroup()
                                .addGroup(jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel37Layout.createSequentialGroup()
                                                .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel344, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel345, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel338, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel37Layout.createSequentialGroup()
                                                .addComponent(jLabel343, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(游戏道具代码, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(jPanel62, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(jPanel49, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(jPanel64, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel63, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 640));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void 查找道具ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_查找道具ActionPerformed
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
            }
            try {
                Connection con = DBConPool.getInstance().getDataSource().getConnection();
                PreparedStatement ps;

                ResultSet rs;
                ps = con.prepareStatement("SELECT * FROM inventoryitems WHERE itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    ((DefaultTableModel) 游戏道具.getModel()).insertRow(游戏道具.getRowCount(), new Object[]{
                            rs.getInt("characterid"),
                            NPCConversationManager.角色ID取名字(rs.getInt("characterid")),
                            rs.getInt("itemid"),
                            MapleItemInformationProvider.getInstance().getName(rs.getInt("itemid"))
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你要查找的<物品代码>");
        }
    }//GEN-LAST:event_查找道具ActionPerformed

    private void 删除道具ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除道具ActionPerformed
        String 输出 = "";
        PreparedStatement ps1;
        ResultSet rs;
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");

        if (result1) {
            try {
                for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
                }
                ps1 = DBConPool.getInstance().getDataSource().getConnection().prepareStatement("SELECT * FROM inventoryitems WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.游戏道具代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from inventoryitems where itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    JOptionPane.showMessageDialog(null, "成功删除所有代码为 " + Integer.parseInt(this.游戏道具代码.getText()) + " 物品。");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要删除的<物品代码>");
        }
    }//GEN-LAST:event_删除道具ActionPerformed

    private void 查找道具1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_查找道具1ActionPerformed
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
            }
            try {
                Connection con = DBConPool.getInstance().getDataSource().getConnection();
                PreparedStatement ps;

                ResultSet rs;
                ps = con.prepareStatement("SELECT * FROM auctionitems WHERE itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    ((DefaultTableModel) 游戏道具.getModel()).insertRow(游戏道具.getRowCount(), new Object[]{
                            rs.getInt("characterid"),
                            NPCConversationManager.角色ID取名字(rs.getInt("characterid")),
                            rs.getInt("itemid"),
                            MapleItemInformationProvider.getInstance().getName(rs.getInt("itemid"))
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你要查找的<物品代码>");
        }
    }//GEN-LAST:event_查找道具1ActionPerformed

    private void 删除道具1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除道具1ActionPerformed
        String 输出 = "";
        PreparedStatement ps1;
        ResultSet rs;
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            try {
                for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
                }
                ps1 = DBConPool.getInstance().getDataSource().getConnection().prepareStatement("SELECT * FROM auctionitems WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.游戏道具代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from auctionitems where itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    JOptionPane.showMessageDialog(null, "成功删除所有代码为 " + Integer.parseInt(this.游戏道具代码.getText()) + " 物品。");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要删除的<物品代码>");
        }
    }//GEN-LAST:event_删除道具1ActionPerformed

    private void 查找道具2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_查找道具2ActionPerformed
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
            }
            try {
                Connection con = DBConPool.getInstance().getDataSource().getConnection();
                PreparedStatement ps;
                ResultSet rs;
                ps = con.prepareStatement("SELECT * FROM auctionitems1 WHERE itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    ((DefaultTableModel) 游戏道具.getModel()).insertRow(游戏道具.getRowCount(), new Object[]{
                            rs.getInt("characterid"),
                            NPCConversationManager.角色ID取名字(rs.getInt("characterid")),
                            rs.getInt("itemid"),
                            MapleItemInformationProvider.getInstance().getName(rs.getInt("itemid"))
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你要查找的<物品代码>");
        }
    }//GEN-LAST:event_查找道具2ActionPerformed

    private void 删除道具2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除道具2ActionPerformed
        String 输出 = "";
        PreparedStatement ps1;
        ResultSet rs;
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");

        if (result1) {
            try {
                for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
                }
                ps1 = DBConPool.getInstance().getDataSource().getConnection().prepareStatement("SELECT * FROM auctionitems1 WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.游戏道具代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from auctionitems1 where itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    JOptionPane.showMessageDialog(null, "成功删除所有代码为 " + Integer.parseInt(this.游戏道具代码.getText()) + " 物品。");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要删除的<物品代码>");
        }
    }//GEN-LAST:event_删除道具2ActionPerformed

    private void 查找道具3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_查找道具3ActionPerformed
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
            }
            try {
                Connection con = DBConPool.getInstance().getDataSource().getConnection();
                PreparedStatement ps;
                ResultSet rs;
                ps = con.prepareStatement("SELECT * FROM bank_item1 WHERE itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    ((DefaultTableModel) 游戏道具.getModel()).insertRow(游戏道具.getRowCount(), new Object[]{
                            rs.getInt("cid"),
                            NPCConversationManager.角色ID取名字(rs.getInt("cid")),
                            rs.getInt("itemid"),
                            MapleItemInformationProvider.getInstance().getName(rs.getInt("itemid"))
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你要查找的<物品代码>");
        }
    }//GEN-LAST:event_查找道具3ActionPerformed

    private void 删除道具3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除道具3ActionPerformed
        String 输出 = "";
        PreparedStatement ps1;
        ResultSet rs;
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            try {
                for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
                }
                ps1 = DBConPool.getInstance().getDataSource().getConnection().prepareStatement("SELECT * FROM bank_item1 WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.游戏道具代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from bank_item1 where itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    JOptionPane.showMessageDialog(null, "成功删除所有代码为 " + Integer.parseInt(this.游戏道具代码.getText()) + " 物品。");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要删除的<物品代码>");
        }
    }//GEN-LAST:event_删除道具3ActionPerformed

    private void 查找道具4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_查找道具4ActionPerformed
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");
        if (result1) {
            for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
            }
            try {
                Connection con = DBConPool.getInstance().getDataSource().getConnection();
                PreparedStatement ps;

                ResultSet rs;
                ps = con.prepareStatement("SELECT * FROM bank_item WHERE itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "");
                rs = ps.executeQuery();
                while (rs.next()) {
                    ((DefaultTableModel) 游戏道具.getModel()).insertRow(游戏道具.getRowCount(), new Object[]{
                            rs.getInt("cid"),
                            NPCConversationManager.角色ID取名字(rs.getInt("cid")),
                            rs.getInt("itemid"),
                            MapleItemInformationProvider.getInstance().getName(rs.getInt("itemid"))
                    });
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你要查找的<物品代码>");
        }
    }//GEN-LAST:event_查找道具4ActionPerformed

    private void 删除道具4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_删除道具4ActionPerformed
        String 输出 = "";
        PreparedStatement ps1;
        ResultSet rs;
        boolean result1 = this.游戏道具代码.getText().matches("[0-9]+");

        if (result1) {
            try {
                for (int i = this.游戏道具.getModel().getRowCount() - 1; i >= 0; i--) {
                    ((DefaultTableModel) (this.游戏道具.getModel())).removeRow(i);
                }
                ps1 = DBConPool.getInstance().getDataSource().getConnection().prepareStatement("SELECT * FROM bank_item WHERE itemid = ?");
                ps1.setInt(1, Integer.parseInt(this.游戏道具代码.getText()));
                rs = ps1.executeQuery();
                if (rs.next()) {
                    String sqlstr = " delete from bank_item where itemid =" + Integer.parseInt(this.游戏道具代码.getText()) + "";
                    ps1.executeUpdate(sqlstr);
                    JOptionPane.showMessageDialog(null, "成功删除所有代码为 " + Integer.parseInt(this.游戏道具代码.getText()) + " 物品。");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "请输入你想要删除的<物品代码>");
        }
    }//GEN-LAST:event_删除道具4ActionPerformed

    private javax.swing.JTable 游戏道具;
    private javax.swing.JTextField 游戏道具代码;
    // End of variables declaration//GEN-END:variables
}
